# .github/workflows/docker-build.yml

name: Source Pull + Docker Build

on:
  workflow_dispatch:

permissions:
  contents: read       # Needed to read repository contents
  packages: write      # Needed to push Docker images to ghcr.io

env:
  DOCKER_REGISTRY: "ghcr.io"
  SOURCE_REPOSITORY: "owner/source-repo"      # ðŸ”‘ Replace with your source repository in "owner/repo" format
  SOURCE_REF: "main"                           # ðŸ”‘ Set to the desired tag or branch
  SOURCE_DIRECTORY: "public"                 # ðŸ”‘ Set to "." or "./" for root or specify a subdirectory like "src", "public" or "build"
  IMAGE_NAME: "my-nginx-image"                 # ðŸ”‘ Replace with your desired image name
  SOURCE_DEPLOYMENT_KEY: ${{ secrets.SOURCE_DEPLOYMENT_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout Current Repository (contains Dockerfile and nginx.conf)
      - name: Checkout Current Repository
        uses: actions/checkout@v4
        with:
          ref: main                                   # ðŸ”‘ Set to your workflow repository's branch

      # Set up SSH Key and known_hosts for Source Repository Access (Optional)
      - name: Set up SSH Key for Source Repository Access (Optional)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SOURCE_DEPLOYMENT_KEY }}
        if: env.SOURCE_DEPLOYMENT_KEY !=  ''

      # Determine if SOURCE_REF is a tag or branch in the source repository
      - name: Determine Source Reference Type
        id: determine_ref
        run: |
          SOURCE_REF="${{ env.SOURCE_REF }}"
          
          if [ -n "${{ secrets.SOURCE_DEPLOYMENT_KEY }}" ]; then
            SOURCE_REPO="git@github.com:${{ env.SOURCE_REPOSITORY }}.git"
          else
            SOURCE_REPO="https://github.com/${{ env.SOURCE_REPOSITORY }}.git"
          fi

          # Check if SOURCE_REF is a tag
          TAG_EXISTS=$(git ls-remote --tags "$SOURCE_REPO" "refs/tags/$SOURCE_REF" | wc -l)
          
          if [ "$TAG_EXISTS" -gt 0 ]; then
            echo "ref=refs/tags/$SOURCE_REF" >> $GITHUB_OUTPUT
            echo "type=tag" >> $GITHUB_OUTPUT
          else
            # Assume it's a branch
            BRANCH_EXISTS=$(git ls-remote --heads "$SOURCE_REPO" "refs/heads/$SOURCE_REF" | wc -l)
            if [ "$BRANCH_EXISTS" -gt 0 ]; then
              echo "ref=refs/heads/$SOURCE_REF" >> $GITHUB_OUTPUT
              echo "type=branch" >> $GITHUB_OUTPUT
            else
              echo "Error: SOURCE_REF '$SOURCE_REF' not found as a tag or branch in $SOURCE_REPOSITORY" >&2
              exit 1
            fi
          fi

      # Checkout Source Repository
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPOSITORY }}
          ref: ${{ steps.determine_ref.outputs.ref }}
          path: sources
          ssh-key: ${{ secrets.SOURCE_DEPLOYMENT_KEY || '' }}

      # Copy Specified Source Directory to ./source
      - name: Copy Source Directory
        run: |
          if [ "${{ env.SOURCE_DIRECTORY }}" == "." ] || [ "${{ env.SOURCE_DIRECTORY }}" == "./" ]; then
            cp -r sources/. ./source
          else
            cp -r sources/${{ env.SOURCE_DIRECTORY }}/ ./source
          fi

      # Login to GitHub Container Registry using GITHUB_TOKEN
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set Docker Image Tag Based on Reference Type
      - name: Set Image Tag
        id: set_tag
        run: |
          if [ "${{ steps.determine_ref.outputs.type }}" == "tag" ]; then
            TAG="${{ env.SOURCE_REF }}"
          else
            TAG=$(echo "${{ env.SOURCE_REF }}" | tr '/' '-')
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build \
            -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.tag }} \
            -f Dockerfile .

      # Push Docker Image to GitHub Container Registry
      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.tag }}
